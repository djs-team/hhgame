import org.gradle.internal.os.OperatingSystem;

apply plugin: 'com.android.application'

def getReleaseStoreFile() {
    if ("true".equals(IS_JENKINS)) {
        return file(RELEASE_STORE_FILE)
    } else {
        return file(RELEASE_STORE_FILE)
    }
}

//获取当前时间
def getDate() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("GMT+08:00"))
}

android {
    compileSdkVersion PROP_COMPILE_SDK_VERSION.toInteger()

    defaultConfig {
        applicationId "com.hehegame.chess"
        minSdkVersion PROP_MIN_SDK_VERSION
        targetSdkVersion PROP_TARGET_SDK_VERSION
        versionCode 2024
        versionName "2.0.24"
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }

        packagingOptions {
            exclude 'META-INF/rxjava.properties'
        }
        manifestPlaceholders = [
                JPUSH_PKGNAME: "com.hehegame.chess",
                JPUSH_APPKEY : "e1f41c1d0fc62f37b80845f3", //JPush 上注册的包名对应的 Appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
        ]
        externalNativeBuild {
            if (PROP_BUILD_TYPE == 'ndk-build') {
                ndkBuild {
                    targets 'cocos2djs'
                    arguments 'NDK_TOOLCHAIN_VERSION=clang'
                    arguments '-j' + Runtime.runtime.availableProcessors()

                    def module_paths = [project.file("../../../cocos2d-x").absolutePath,
                                        project.file("../../../cocos2d-x/cocos").absolutePath,
                                        project.file("../../../cocos2d-x/external").absolutePath]
                    if (OperatingSystem.current().isWindows()) {
                        module_paths = module_paths.collect { it.replaceAll('\\\\', '/') }
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(";")
                    } else {
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(':')
                    }
                }
            } else if (PROP_BUILD_TYPE == 'cmake') {
                cmake {
                    arguments "-DCMAKE_FIND_ROOT_PATH=", "-DANDROID_STL=c++_static", "-DANDROID_TOOLCHAIN=clang", "-DANDROID_ARM_NEON=TRUE"
                    cppFlags "-frtti -fexceptions -fsigned-char"
                }
            }
        }
        ndk {
            abiFilters = []
            abiFilters.addAll(PROP_APP_ABI.split(':').collect { it as String })
        }
    }
    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets.main {
        java.srcDir "src"
        res.srcDir "res"
        jniLibs.srcDir "libs"
        manifest.srcFile "AndroidManifest.xml"
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    externalNativeBuild {
        if (PROP_BUILD_TYPE == 'ndk-build') {
            ndkBuild {
                path "jni/Android.mk"
            }
        } else if (PROP_BUILD_TYPE == 'cmake') {
            cmake {
                path "../../../../CMakeLists.txt"
            }
        }
    }

//    signingConfigs {
//
//       release {
//            if (project.hasProperty("RELEASE_STORE_FILE")) {
//                storeFile file(RELEASE_STORE_FILE)
//                storePassword RELEASE_STORE_PASSWORD
//                keyAlias RELEASE_KEY_ALIAS
//                keyPassword RELEASE_KEY_PASSWORD
//            }
//        }
//    }
    signingConfigs {
        release {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
        debug {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }


    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release


            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=0'
                }
            }
        }

        debug {
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=1'
                }
            }
        }
    }
}

def getCocosCommandPath() {
    if (OperatingSystem.current().isWindows()) {
        return 'cocos.bat'
    } else {
        // on unix like system, can not get environments variables easily
        // so run a shell script to get environment variable sets by cocos2d-x setup.py
        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                executable = project.file('get_environment.sh')
                standardOutput = os
            }
            ext.console_path = os.toString().trim()
        }
        return new File(console_path + '/cocos').absolutePath;
    }
}


// a method used to invoke the cocos jscompile command
def compileJS(srcDir, dstDir) {
    def compileArgs = ['jscompile', '-s', srcDir, '-d', dstDir]

    println 'running command : ' + 'cocos ' + compileArgs.join(' ')
    exec {
//        // if you meet problem, just replace `getCocosCommandPath()` to the path of cocos command
//        executable getCocosCommandPath()
//        args compileArgs
        // if you meet problem, just replace `getCocosCommandPath()` to the path of cocos command
        //executable getCocosCommandPath()
        if (OperatingSystem.current().isWindows()) {
            executable 'cocos.bat'
            args compileArgs
        } else {
            executable 'cocos'
            args compileArgs
        }
    }

    // remove the js files in dstDir
    delete fileTree(dstDir) {
        include '**/*.js'
    }
}

android.applicationVariants.all { variant ->
    // delete previous files first
    delete "${buildDir}/intermediates/assets/${variant.dirName}"

    variant.mergeAssets.doLast {
        copy {
            from "${buildDir}/../../../../../res"
            into "${buildDir}/intermediates/assets/${variant.dirName}/res"
        }

        copy {
            from "${buildDir}/../../../../../src"
            into "${buildDir}/intermediates/assets/${variant.dirName}/src"
        }

        copy {
            from "${buildDir}/../../../../cocos2d-x/cocos/scripting/js-bindings/script"
            into "${buildDir}/intermediates/assets/${variant.dirName}/script"
        }

        copy {
            from "${buildDir}/../../../../../main.js"
            from "${buildDir}/../../../../../project.json"
            into "${buildDir}/intermediates/assets/${variant.dirName}"
        }

        // compile the scripts if necessary
        def compileScript = (variant.name.compareTo('release') == 0)
        if (project.hasProperty('PROP_COMPILE_SCRIPT')) {
            compileScript = (PROP_COMPILE_SCRIPT.compareTo('1') == 0)
        }

        if (compileScript) {
            compileJS("${buildDir}/intermediates/assets/${variant.dirName}",
                    "${buildDir}/intermediates/assets/${variant.dirName}")
        }
    }
    variant.outputs.each { output ->
        def apk = output.outputFile
        if (apk != null && apk.name.endsWith('.apk')) {
            //新名字
            def fileName
            //时间戳
            def timeNow = getDate()
            //输出文件夹
            def outDirectory

            outDirectory = BUILD_PATH_LOCAL
            fileName = "${APPNAME}_V${variant.versionName}_${releaseTime()}.apk"
            output.outputFileName = new File(outDirectory, fileName)
        }
    }

}

def releaseTime() {
    return new Date().format("yyyy-MM-dd-HH-mm-ss", TimeZone.getTimeZone("Asia/Chongqing"))
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':libcocos2dx')
    implementation project(':app.voice')
    implementation project(':app.mine')
    implementation project(':app.im')
    implementation project(':app+stub')
    implementation project(':app+kit')
    implementation deps.support.app_compat
    implementation deps.support.design
    implementation deps.multidex
    annotationProcessor deps.dagger.compiler
    annotationProcessor deps.dagger.android_support_compiler
    annotationProcessor deps.router.compiler
    implementation project(':beauty')
    implementation project(':advertisement')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
